{"version":3,"sources":["components/LunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","log","launches","map","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","alt","styles","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SAIe,SAASA,EAAT,GAA+F,IAAD,IAA1EC,OAAQC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,eAEvF,OACI,qBAAKC,UAAU,sBAAf,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,WAAf,UACI,2CAAa,uBAAMA,UAAWC,IAC1B,CACI,eAAgBF,EAChB,eAAgBA,IAHX,cAKRF,EALQ,UAMb,wCAAU,cAAC,IAAD,CAAQK,OAAO,mBAAf,SAAmCJ,IAA7C,UAEJ,qBAAKE,UAAU,WAAf,SACI,cAAC,IAAD,CAAMG,GAAE,kBAAaP,GAAiBI,UAAU,oBAAhD,mCCjBL,SAASI,IACpB,OACI,sBAAKJ,UAAU,OAAf,UACI,8BACI,sBAAMA,UAAU,yBADpB,gBAGA,8BACA,sBAAMA,UAAU,wBADhB,gBCHZ,I,EAAMK,EAAiBC,IAAH,2KAUL,SAASC,IACpB,OACI,eAAC,IAAMC,SAAP,WACI,oBAAIR,UAAU,mBAGd,cAACI,EAAD,IACA,cAAC,IAAD,CAAOK,MAAOJ,EAAd,SAEY,YAA2B,IAAzBK,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KACd,OAAGF,EAAgB,6CAChBC,GAAOE,QAAQC,IAAIH,GAEf,cAAC,WAAD,UAECC,EAAKG,SAASC,KAAI,SAAArB,GAAM,OACpB,cAACD,EAAD,CAAsCC,OAAQA,GAA9BA,EAAOC,2BCzB/D,IAAMS,EAAiBC,IAAH,uVAgBL,SAASW,EAAOC,GAAQ,IAC9BtB,EAAkBsB,EAAMC,MAAMC,OAA9BxB,cAEL,OADAA,EAAgByB,SAASzB,GAErB,cAAC,WAAD,UACI,cAAC,IAAD,CAAOa,MAASJ,EAAgBiB,UAAa,CAAC1B,iBAA9C,SAEQ,YAA2B,IAAzBc,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAEd,GAAGF,EAAS,OAAO,4CAChBC,GAAOE,QAAQC,IAAIH,GAHA,MAMjBC,EAAKjB,OAFHE,EAJe,EAIfA,aAAcD,EAJC,EAIDA,cAAe2B,EAJd,EAIcA,YAAaxB,EAJ3B,EAI2BA,eAJ3B,IAI0CyB,OAC5DC,EALkB,EAKlBA,UAAWC,EALO,EAKPA,YAAYC,EALL,EAKKA,YAE3B,OAAO,gCACH,oBAAI3B,UAAU,iBAAd,SACI,uBAAMA,UAAU,YAAhB,sBACcH,OAGlB,oBAAIG,UAAW,OAAf,4BACA,qBAAIA,UAAU,aAAd,UACI,qBAAIA,UAAU,kBAAd,4BACoBJ,KAEpB,qBAAII,UAAU,kBAAd,0BACkBuB,KAElB,qBAAIvB,UAAU,kBAAd,gCACuB,uBAAMA,UAAWC,IAAW,CAC3C,eAAgBF,EAChB,eAAgBA,IAFD,cAGbA,EAAe,MAAO,cAIpC,oBAAIC,UAAU,OAAd,4BACA,qBAAIA,UAAU,aAAd,UACI,qBAAIA,UAAU,kBAAd,wBAA4CyB,KAC5C,qBAAIzB,UAAU,kBAAd,0BAA8C0B,KAC9C,qBAAI1B,UAAU,kBAAd,0BAA8C2B,QAElD,uBACA,cAAC,IAAD,CAAMxB,GAAG,IAAIH,UAAU,oBAAvB,0BCzD5B,IAAM4B,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAiBQC,MAdf,WACE,OACE,cAAC,IAAD,CAAgBH,OAASA,EAAzB,SACE,cAAC,IAAD,UACF,sBAAK5B,UAAU,YAAf,UACQ,qBAAKgC,IAAI,SAASC,OAAQ,CAACC,MAAM,GAAIC,QAAS,QAASC,OAAO,UACrE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYhC,IAClC,cAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,yBAAyBC,UAAYtB,YCP7CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d014f25.chunk.js","sourcesContent":["import React from 'react'\r\nimport classNames from 'classnames'\r\nimport Moment from 'react-moment'\r\nimport {Link} from 'react-router-dom'\r\nexport default function LunchItem({launch:{flight_number, mission_name, launch_date_local, launch_success}}) {\r\n    \r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span className={classNames(\r\n                        {\r\n                            'text-success': launch_success,\r\n                            'text-danger': !launch_success\r\n                        }\r\n                    )}> {mission_name} </span></h4>\r\n                    <p> Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment> </p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\" >Launch Details</Link>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success                \r\n            </p>            \r\n            <p>\r\n            <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport LunchItem from './LunchItem';\r\nimport MissionKey from './MissionKey';\r\nconst LAUNCHES_QUERY = gql`\r\nquery LaunchesQuery{\r\n    launches{\r\n        flight_number\r\n        mission_name\r\n        launch_date_local\r\n        launch_success\r\n    }\r\n}\r\n`;\r\nexport default function Launches() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1 className=\"display-4 my-3\">\r\n                \r\n            </h1>\r\n            <MissionKey />\r\n            <Query query={LAUNCHES_QUERY}>\r\n                    {\r\n                        ({loading, error, data})=>{\r\n                            if(loading) return <h4>Loading...</h4>\r\n                            if(error) console.log(error);\r\n                            \r\n                            return <Fragment>\r\n                                {\r\n                                    data.launches.map(launch=>(\r\n                                        <LunchItem key={launch.flight_number} launch={launch} />\r\n                                    ))\r\n                                }\r\n                            </Fragment>\r\n                        }\r\n                    }\r\n                </Query>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport gql from 'graphql-tag';\r\nimport {Query } from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\nquery LaunchQuery($flight_number: Int!){\r\n    launch(flight_number : $flight_number){\r\n        flight_number\r\n        mission_name\r\n        launch_year\r\n        launch_success\r\n        launch_date_local\r\n        rocket{\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n    }\r\n}\r\n`\r\nexport default function Launch(props) {\r\n    let {flight_number}  = props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n    return (\r\n        <Fragment>\r\n            <Query query = {LAUNCHES_QUERY} variables = {{flight_number}}>\r\n                {\r\n                    ({loading, error, data})=>{\r\n\r\n                        if(loading) return <h4>Loading...</h4>\r\n                        if(error) console.log(error);\r\n                        const {mission_name, flight_number, launch_year, launch_success,rocket:{\r\n                            rocket_id, rocket_name,rocket_type\r\n                        }} = data.launch;\r\n                        return <div>\r\n                            <h2 className=\"display-4 my-3\">\r\n                                <span className=\"text-dark\">\r\n                                    Mission: {mission_name}\r\n                                </span>\r\n                            </h2>\r\n                            <h4 className= 'mb-3'>Launch Details</h4>\r\n                            <ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">\r\n                                    Flight Number: {flight_number}\r\n                                </li>\r\n                                <li className=\"list-group-item\">\r\n                                    Launch Year: {launch_year}\r\n                                </li>\r\n                                <li className=\"list-group-item\">\r\n                                    Launch Successful: <span className={classNames({\r\n                                        'text-success': launch_success,\r\n                                        'text-danger': !launch_success\r\n                                    })}> {launch_success?'Yes': 'No' \r\n                                }</span>\r\n                                </li>\r\n                            </ul>\r\n                            <h4 className=\"my-3\">Rocket Details</h4>\r\n                            <ul className=\"list-group\">\r\n                                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                            </ul>\r\n                            <hr />\r\n                            <Link to='/' className=\"btn btn-secondary\">Back</Link>\r\n                        </div>\r\n\r\n                    }\r\n                    \r\n                }\r\n            </Query>\r\n        </Fragment>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client ={client}>\n      <Router>\n    <div className=\"container\">\n            <img alt=\"SpaceX\" styles={{width:25, display: 'block', margin:'auto'}} />\n     <Route exact path=\"/\" component ={Launches} />\n     <Route exact path=\"/launch/:flight_number\" component ={Launch} />\n    </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}